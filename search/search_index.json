{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"basics_of_engine_creation/","text":"Basics of Engine Creation Here im just going to show the basics. An engine file might look like this: import \"engine_sim.mr\" units units() constants constants() impulse_response_library ir_lib() label cycle(2 * 360 * units.deg) public node saab_distributor { input wires; input timing_curve; input rev_limit: 8500 * units.rpm; alias output __out: ignition_module(timing_curve: timing_curve, rev_limit: rev_limit) .connect_wire(wires.wire1, (0.0/4.0) * cycle) .connect_wire(wires.wire2, (3.0/4.0) * cycle) .connect_wire(wires.wire3, (1.0/4.0) * cycle) .connect_wire(wires.wire4, (2.0/4.0) * cycle); } private node wires { output wire1: ignition_wire(); output wire2: ignition_wire(); output wire3: ignition_wire(); output wire4: ignition_wire(); } private node add_sym_sample { input angle; input lift; input this; alias output __out: this; this.add_sample(angle * units.deg, lift * units.thou) this.add_sample(-angle * units.deg, lift * units.thou) } public node b201_lobe_profile_int { alias output __out: harmonic_cam_lobe( duration_at_50_thou: 230 * units.deg, gamma: 0.8, lift: 13.3 * units.mm, steps: 100 ); } public node b201_lobe_profile_exh { alias output __out: harmonic_cam_lobe( duration_at_50_thou: 230 * units.deg, gamma: 0.8, lift: 13.3 * units.mm, steps: 100 ); } public node saab_camshaft_builder { input lobe_profile: b201_lobe_profile_int(); input ex_lobe_profile: b201_lobe_profile_exh(); input intake_lobe_profile: lobe_profile; input exhaust_lobe_profile: ex_lobe_profile; input lobe_separation: 106.0 * units.deg; input intake_lobe_center: lobe_separation; input exhaust_lobe_center: lobe_separation; input advance: 0.0 * units.deg; input base_radius: 0.6 * units.inch; output intake_cam_0: _intake_cam_0; output exhaust_cam_0: _exhaust_cam_0; camshaft_parameters params( advance: advance, base_radius: base_radius ) camshaft _intake_cam_0(params, lobe_profile: intake_lobe_profile) camshaft _exhaust_cam_0(params, lobe_profile: exhaust_lobe_profile) label rot360(360 * units.deg) label cycle(2 * 360 * units.deg) _intake_cam_0 .add_lobe(rot360 + lobe_separation + 0.0/4 * cycle) .add_lobe(rot360 + lobe_separation + 3.0/4 * cycle) .add_lobe(rot360 + lobe_separation + 1.0/4 * cycle) .add_lobe(rot360 + lobe_separation + 2.0/4 * cycle) _exhaust_cam_0 .add_lobe(rot360 - lobe_separation + 0.0/4 * cycle) .add_lobe(rot360 - lobe_separation + 3.0/4 * cycle) .add_lobe(rot360 - lobe_separation + 1.0/4 * cycle) .add_lobe(rot360 - lobe_separation + 2.0/4 * cycle) } private node add_flow_sample { input lift; input flow; input this; alias output __out: this; this.add_sample(lift * units.mm, k_28inH2O(flow)) } public node saab_b201_head { input intake_camshaft; input exhaust_camshaft; input chamber_volume: 34.0 * units.cc; input flip_display: false; input flow_attenuation: 1.0; input lift_scale: 1.0; alias output __out: head; function intake_flow(1 * units.mm) intake_flow .add_flow_sample(0 * lift_scale, 0 * flow_attenuation) .add_flow_sample(1 * lift_scale, 35 * flow_attenuation) .add_flow_sample(2 * lift_scale, 60 * flow_attenuation) .add_flow_sample(3 * lift_scale, 90 * flow_attenuation) .add_flow_sample(4 * lift_scale, 125 * flow_attenuation) .add_flow_sample(5 * lift_scale, 150 * flow_attenuation) .add_flow_sample(6 * lift_scale, 175 * flow_attenuation) .add_flow_sample(7 * lift_scale, 200 * flow_attenuation) .add_flow_sample(8 * lift_scale, 215 * flow_attenuation) .add_flow_sample(9 * lift_scale, 230 * flow_attenuation) .add_flow_sample(10 * lift_scale, 235 * flow_attenuation) .add_flow_sample(11 * lift_scale, 235 * flow_attenuation) .add_flow_sample(12 * lift_scale, 238 * flow_attenuation) function exhaust_flow(1 * units.mm) exhaust_flow .add_flow_sample(0 * lift_scale, 0 * flow_attenuation) .add_flow_sample(1 * lift_scale, 35 * flow_attenuation) .add_flow_sample(2 * lift_scale, 55 * flow_attenuation) .add_flow_sample(3 * lift_scale, 85 * flow_attenuation) .add_flow_sample(4 * lift_scale, 105 * flow_attenuation) .add_flow_sample(5 * lift_scale, 120 * flow_attenuation) .add_flow_sample(6 * lift_scale, 140 * flow_attenuation) .add_flow_sample(7 * lift_scale, 150 * flow_attenuation) .add_flow_sample(8 * lift_scale, 155 * flow_attenuation) .add_flow_sample(9 * lift_scale, 160 * flow_attenuation) .add_flow_sample(10 * lift_scale, 165 * flow_attenuation) .add_flow_sample(11 * lift_scale, 165 * flow_attenuation) .add_flow_sample(12 * lift_scale, 165 * flow_attenuation) cylinder_head head( chamber_volume: chamber_volume, intake_runner_volume: 100.0 * units.cc, intake_runner_cross_section_area: 2 * 12.4087 * units.cm2, intake_port_flow: intake_flow, exhaust_port_flow: exhaust_flow, intake_camshaft: intake_camshaft, exhaust_camshaft: exhaust_camshaft, flip_display: flip_display ) } public node b201 { alias output __out: engine; engine engine( name: \"SAAB B201\", starter_torque: 150 * units.lb_ft, starter_speed: 1000 * units.rpm, redline: 7000 * units.rpm, fuel: fuel( max_turbulence_effect: 4.0 ) ) wires wires() crankshaft c0( throw: 80 * units.mm / 2, flywheel_mass: 5.9 * units.kg, mass: 5 * units.kg, friction_torque: 10.0 * units.lb_ft, moment_of_inertia: 0.22986844776863666 * 0.9, position_x: 0.0, position_y: 0.0, tdc: 135 * units.deg ) label cycle(720 * units.deg) rod_journal rj0(angle: 0 * cycle/4) rod_journal rj1(angle: 3 * cycle/4) rod_journal rj2(angle: 1 * cycle/4) rod_journal rj3(angle: 2 * cycle/4) c0 .add_rod_journal(rj0) .add_rod_journal(rj1) .add_rod_journal(rj2) .add_rod_journal(rj3) piston_parameters piston_params( mass: 280 * units.g, //blowby: k_28inH2O(0.1), compression_height: 11.2 * units.mm, wrist_pin_position: 0.0, displacement: 0.0 ) connecting_rod_parameters cr_params( mass: 300.0 * units.g, moment_of_inertia: 0.0015884918028487504, center_of_mass: 0.0, length: 153 * units.mm ) cylinder_bank_parameters bank_params( bore: 90 * units.mm, deck_height: 203.2 * units.mm ) performer_rpm_intake intake( carburetor_cfm: 500.0, idle_flow_rate_cfm: 0.1, idle_throttle_plate_position: 0.94, // start at 0.963, go to -> 0.97 throttle_gamma: 2.0 ) exhaust_system_parameters es_params( outlet_flow_rate: k_carb(1000.0), primary_tube_length: 20.0 * units.inch, primary_flow_rate: k_carb(200.0), velocity_decay: 1.0, //0.5 volume: 50.0 * units.L ) exhaust_system exhaust0(es_params, audio_volume: 0.5, impulse_response: ir_lib.default_0) exhaust_system exhaust1(es_params, audio_volume: 1.0, impulse_response: ir_lib.default_0) cylinder_bank b0(bank_params, angle: 45 * units.deg) b0 .add_cylinder( piston: piston(piston_params, blowby: k_28inH2O(0.1)), connecting_rod: connecting_rod(cr_params), rod_journal: rj0, intake: intake, exhaust_system: exhaust0, ignition_wire: wires.wire1 ) .add_cylinder( piston: piston(piston_params, blowby: k_28inH2O(0.1)), connecting_rod: connecting_rod(cr_params), rod_journal: rj1, intake: intake, exhaust_system: exhaust1, ignition_wire: wires.wire2 ) .add_cylinder( piston: piston(piston_params, blowby: k_28inH2O(0.1)), connecting_rod: connecting_rod(cr_params), rod_journal: rj2, intake: intake, exhaust_system: exhaust0, ignition_wire: wires.wire3 ) .add_cylinder( piston: piston(piston_params, blowby: k_28inH2O(0.1)), connecting_rod: connecting_rod(cr_params), rod_journal: rj3, intake: intake, exhaust_system: exhaust1, ignition_wire: wires.wire4 ) engine .add_cylinder_bank(b0) engine.add_crankshaft(c0) harmonic_cam_lobe lobe( duration_at_50_thou: 256 * units.deg, gamma: 1.1, lift: 10.2 * units.mm, steps: 100 ) saab_camshaft_builder camshaft( lobe_profile: b201_lobe_profile_int(), ex_lobe_profile: b201_lobe_profile_exh() ) b0.set_cylinder_head ( saab_b201_head( intake_camshaft: camshaft.intake_cam_0, exhaust_camshaft: camshaft.exhaust_cam_0 ) ) function timing_curve(1000 * units.rpm) timing_curve .add_sample(0000 * units.rpm, 10 * units.deg) .add_sample(1000 * units.rpm, 10 * units.deg) .add_sample(2000 * units.rpm, 30 * units.deg) .add_sample(3000 * units.rpm, 30 * units.deg) .add_sample(4000 * units.rpm, 30 * units.deg) .add_sample(5000 * units.rpm, 30 * units.deg) .add_sample(6000 * units.rpm, 30 * units.deg) .add_sample(7000 * units.rpm, 30 * units.deg) engine.add_ignition_module( saab_distributor( wires: wires, timing_curve: timing_curve, rev_limit: 8000 * units.rpm )) } This is my SAAB B201 engine and it might look difficult right, but in reality it isnt. What makes a functional engine? A functional engine needs - A distributor: - Wires - A camshaft - An engine block head - A Crankshaft - Crankshaft journals - Pistons - Cylinder banks - An intake - An exhaust system - And an ignition module All this is needed or the engine sim WILL crash I also want to point out that indentation, closing and opening brackets are is a must just like any programming language u have to follow syntax. Failing to do so will result in instant crash.","title":"Basics of Engine Creation"},{"location":"basics_of_engine_creation/#basics-of-engine-creation","text":"Here im just going to show the basics. An engine file might look like this: import \"engine_sim.mr\" units units() constants constants() impulse_response_library ir_lib() label cycle(2 * 360 * units.deg) public node saab_distributor { input wires; input timing_curve; input rev_limit: 8500 * units.rpm; alias output __out: ignition_module(timing_curve: timing_curve, rev_limit: rev_limit) .connect_wire(wires.wire1, (0.0/4.0) * cycle) .connect_wire(wires.wire2, (3.0/4.0) * cycle) .connect_wire(wires.wire3, (1.0/4.0) * cycle) .connect_wire(wires.wire4, (2.0/4.0) * cycle); } private node wires { output wire1: ignition_wire(); output wire2: ignition_wire(); output wire3: ignition_wire(); output wire4: ignition_wire(); } private node add_sym_sample { input angle; input lift; input this; alias output __out: this; this.add_sample(angle * units.deg, lift * units.thou) this.add_sample(-angle * units.deg, lift * units.thou) } public node b201_lobe_profile_int { alias output __out: harmonic_cam_lobe( duration_at_50_thou: 230 * units.deg, gamma: 0.8, lift: 13.3 * units.mm, steps: 100 ); } public node b201_lobe_profile_exh { alias output __out: harmonic_cam_lobe( duration_at_50_thou: 230 * units.deg, gamma: 0.8, lift: 13.3 * units.mm, steps: 100 ); } public node saab_camshaft_builder { input lobe_profile: b201_lobe_profile_int(); input ex_lobe_profile: b201_lobe_profile_exh(); input intake_lobe_profile: lobe_profile; input exhaust_lobe_profile: ex_lobe_profile; input lobe_separation: 106.0 * units.deg; input intake_lobe_center: lobe_separation; input exhaust_lobe_center: lobe_separation; input advance: 0.0 * units.deg; input base_radius: 0.6 * units.inch; output intake_cam_0: _intake_cam_0; output exhaust_cam_0: _exhaust_cam_0; camshaft_parameters params( advance: advance, base_radius: base_radius ) camshaft _intake_cam_0(params, lobe_profile: intake_lobe_profile) camshaft _exhaust_cam_0(params, lobe_profile: exhaust_lobe_profile) label rot360(360 * units.deg) label cycle(2 * 360 * units.deg) _intake_cam_0 .add_lobe(rot360 + lobe_separation + 0.0/4 * cycle) .add_lobe(rot360 + lobe_separation + 3.0/4 * cycle) .add_lobe(rot360 + lobe_separation + 1.0/4 * cycle) .add_lobe(rot360 + lobe_separation + 2.0/4 * cycle) _exhaust_cam_0 .add_lobe(rot360 - lobe_separation + 0.0/4 * cycle) .add_lobe(rot360 - lobe_separation + 3.0/4 * cycle) .add_lobe(rot360 - lobe_separation + 1.0/4 * cycle) .add_lobe(rot360 - lobe_separation + 2.0/4 * cycle) } private node add_flow_sample { input lift; input flow; input this; alias output __out: this; this.add_sample(lift * units.mm, k_28inH2O(flow)) } public node saab_b201_head { input intake_camshaft; input exhaust_camshaft; input chamber_volume: 34.0 * units.cc; input flip_display: false; input flow_attenuation: 1.0; input lift_scale: 1.0; alias output __out: head; function intake_flow(1 * units.mm) intake_flow .add_flow_sample(0 * lift_scale, 0 * flow_attenuation) .add_flow_sample(1 * lift_scale, 35 * flow_attenuation) .add_flow_sample(2 * lift_scale, 60 * flow_attenuation) .add_flow_sample(3 * lift_scale, 90 * flow_attenuation) .add_flow_sample(4 * lift_scale, 125 * flow_attenuation) .add_flow_sample(5 * lift_scale, 150 * flow_attenuation) .add_flow_sample(6 * lift_scale, 175 * flow_attenuation) .add_flow_sample(7 * lift_scale, 200 * flow_attenuation) .add_flow_sample(8 * lift_scale, 215 * flow_attenuation) .add_flow_sample(9 * lift_scale, 230 * flow_attenuation) .add_flow_sample(10 * lift_scale, 235 * flow_attenuation) .add_flow_sample(11 * lift_scale, 235 * flow_attenuation) .add_flow_sample(12 * lift_scale, 238 * flow_attenuation) function exhaust_flow(1 * units.mm) exhaust_flow .add_flow_sample(0 * lift_scale, 0 * flow_attenuation) .add_flow_sample(1 * lift_scale, 35 * flow_attenuation) .add_flow_sample(2 * lift_scale, 55 * flow_attenuation) .add_flow_sample(3 * lift_scale, 85 * flow_attenuation) .add_flow_sample(4 * lift_scale, 105 * flow_attenuation) .add_flow_sample(5 * lift_scale, 120 * flow_attenuation) .add_flow_sample(6 * lift_scale, 140 * flow_attenuation) .add_flow_sample(7 * lift_scale, 150 * flow_attenuation) .add_flow_sample(8 * lift_scale, 155 * flow_attenuation) .add_flow_sample(9 * lift_scale, 160 * flow_attenuation) .add_flow_sample(10 * lift_scale, 165 * flow_attenuation) .add_flow_sample(11 * lift_scale, 165 * flow_attenuation) .add_flow_sample(12 * lift_scale, 165 * flow_attenuation) cylinder_head head( chamber_volume: chamber_volume, intake_runner_volume: 100.0 * units.cc, intake_runner_cross_section_area: 2 * 12.4087 * units.cm2, intake_port_flow: intake_flow, exhaust_port_flow: exhaust_flow, intake_camshaft: intake_camshaft, exhaust_camshaft: exhaust_camshaft, flip_display: flip_display ) } public node b201 { alias output __out: engine; engine engine( name: \"SAAB B201\", starter_torque: 150 * units.lb_ft, starter_speed: 1000 * units.rpm, redline: 7000 * units.rpm, fuel: fuel( max_turbulence_effect: 4.0 ) ) wires wires() crankshaft c0( throw: 80 * units.mm / 2, flywheel_mass: 5.9 * units.kg, mass: 5 * units.kg, friction_torque: 10.0 * units.lb_ft, moment_of_inertia: 0.22986844776863666 * 0.9, position_x: 0.0, position_y: 0.0, tdc: 135 * units.deg ) label cycle(720 * units.deg) rod_journal rj0(angle: 0 * cycle/4) rod_journal rj1(angle: 3 * cycle/4) rod_journal rj2(angle: 1 * cycle/4) rod_journal rj3(angle: 2 * cycle/4) c0 .add_rod_journal(rj0) .add_rod_journal(rj1) .add_rod_journal(rj2) .add_rod_journal(rj3) piston_parameters piston_params( mass: 280 * units.g, //blowby: k_28inH2O(0.1), compression_height: 11.2 * units.mm, wrist_pin_position: 0.0, displacement: 0.0 ) connecting_rod_parameters cr_params( mass: 300.0 * units.g, moment_of_inertia: 0.0015884918028487504, center_of_mass: 0.0, length: 153 * units.mm ) cylinder_bank_parameters bank_params( bore: 90 * units.mm, deck_height: 203.2 * units.mm ) performer_rpm_intake intake( carburetor_cfm: 500.0, idle_flow_rate_cfm: 0.1, idle_throttle_plate_position: 0.94, // start at 0.963, go to -> 0.97 throttle_gamma: 2.0 ) exhaust_system_parameters es_params( outlet_flow_rate: k_carb(1000.0), primary_tube_length: 20.0 * units.inch, primary_flow_rate: k_carb(200.0), velocity_decay: 1.0, //0.5 volume: 50.0 * units.L ) exhaust_system exhaust0(es_params, audio_volume: 0.5, impulse_response: ir_lib.default_0) exhaust_system exhaust1(es_params, audio_volume: 1.0, impulse_response: ir_lib.default_0) cylinder_bank b0(bank_params, angle: 45 * units.deg) b0 .add_cylinder( piston: piston(piston_params, blowby: k_28inH2O(0.1)), connecting_rod: connecting_rod(cr_params), rod_journal: rj0, intake: intake, exhaust_system: exhaust0, ignition_wire: wires.wire1 ) .add_cylinder( piston: piston(piston_params, blowby: k_28inH2O(0.1)), connecting_rod: connecting_rod(cr_params), rod_journal: rj1, intake: intake, exhaust_system: exhaust1, ignition_wire: wires.wire2 ) .add_cylinder( piston: piston(piston_params, blowby: k_28inH2O(0.1)), connecting_rod: connecting_rod(cr_params), rod_journal: rj2, intake: intake, exhaust_system: exhaust0, ignition_wire: wires.wire3 ) .add_cylinder( piston: piston(piston_params, blowby: k_28inH2O(0.1)), connecting_rod: connecting_rod(cr_params), rod_journal: rj3, intake: intake, exhaust_system: exhaust1, ignition_wire: wires.wire4 ) engine .add_cylinder_bank(b0) engine.add_crankshaft(c0) harmonic_cam_lobe lobe( duration_at_50_thou: 256 * units.deg, gamma: 1.1, lift: 10.2 * units.mm, steps: 100 ) saab_camshaft_builder camshaft( lobe_profile: b201_lobe_profile_int(), ex_lobe_profile: b201_lobe_profile_exh() ) b0.set_cylinder_head ( saab_b201_head( intake_camshaft: camshaft.intake_cam_0, exhaust_camshaft: camshaft.exhaust_cam_0 ) ) function timing_curve(1000 * units.rpm) timing_curve .add_sample(0000 * units.rpm, 10 * units.deg) .add_sample(1000 * units.rpm, 10 * units.deg) .add_sample(2000 * units.rpm, 30 * units.deg) .add_sample(3000 * units.rpm, 30 * units.deg) .add_sample(4000 * units.rpm, 30 * units.deg) .add_sample(5000 * units.rpm, 30 * units.deg) .add_sample(6000 * units.rpm, 30 * units.deg) .add_sample(7000 * units.rpm, 30 * units.deg) engine.add_ignition_module( saab_distributor( wires: wires, timing_curve: timing_curve, rev_limit: 8000 * units.rpm )) } This is my SAAB B201 engine and it might look difficult right, but in reality it isnt.","title":"Basics of Engine Creation"},{"location":"basics_of_engine_creation/#what-makes-a-functional-engine","text":"A functional engine needs - A distributor: - Wires - A camshaft - An engine block head - A Crankshaft - Crankshaft journals - Pistons - Cylinder banks - An intake - An exhaust system - And an ignition module All this is needed or the engine sim WILL crash I also want to point out that indentation, closing and opening brackets are is a must just like any programming language u have to follow syntax. Failing to do so will result in instant crash.","title":"What makes a functional engine?"},{"location":"creation_of_an_engine/","text":"Creation of an engine I am just rly quickly going to go thru the basics of getting an engine to run here OK, nothing too fancy. To start off to get an engine to run all u need is correct Distributor: Camshaft lobes: Rod Journals: And last, cylinder banks: The Distributor The number 1 rule is that 1 full cycle of a combustion engine is 720 degrees of crankshaft rotation. This means that 720 / [number of cylinders] is how u calculate your firing interval. The firing interval is very important, if u get it wrong your engine will NEVER work. The pictures I have here are actually a bad example bcs this is an uneven firing engine making it more complicated so we wont do that now. Instead I am going to show an even firing engine where 720 / [number of cylinders] is actually true. This shows that since this is a V10 the engine wants to fire a cylinder every 72 degrees. I have put the wires in the correct firing order of the engine and then just increment by cycles of 72 degrees until the last cylinder where the crankshaft is at 648 degrees and then it starts over at 0. 0 and 720 is the same value since above we have declared that 1 cycle is 720 degrees: The Camshaft Lobes This also follows your firing order and it is going to open every 72 degrees on this V10. Since the firing order of this engine is 1-2-3-4-7-8-9-10-5-6 the increments of 72 are in that order: The numbers on the side is the cylinder numbering. As u can see we start at 0 on cylinder 1 then +1 on cylinder number 2, +2 on cylinder number 3 and so on. Always incrementing by 72. The numbers on the side(+0.05 and -0.07) do NOT matter They are just there to make the engine sound better. The Cylinder Banks With the cylinder banks we specify the amount of cylinders we have, wires are set based on cylinder numbering so for this bank we have 1, 3, 5, 7 and 9. rod journals are also set based on the firing order. Here my rod journals are labeled rj0, rj2, rj4, rj6 and rj8 which might make it more difficult to understand im sry. Anyways rj0 is here connected to both pistons 1 and 2, rj2 is connected to 3 and 4, rj4 is connected to 5 and 6, rj6 is connected to 7 and 8 and finally rj8 is connected to 9 and 10. The Rod Journals Since the cams spin twice the speed of the crank, the rod journals are incremented by 144 because 72 * 2 = 144 so for you it will be [firing interval] * 2. Then to have this be correct we take a look at our firing order again: 1-2-3-4-7-8-9-10-5-6. So since rj0 is connected to 1 and 2 and the firing order starts with 1 and 2 we want to have rj0 at 0 degrees. Then rj2 is connected to 3 and 4 so we want rj2 at 144 degrees. Then we have a bit of a conflict here, rj4 is connected to 5 and 6 but out firing order says we fire 7 and 8 so then we will increment rj6 by 144 instead since rj6 is connected to 7 and 8. Then u just follow the rest of this order and you are done. If u followed this and understood it, your engine should now atleast run. U will know it is correct when u get mountains and valleys as the exhaust flow just like this. Since this is a V10 I have 10 mountains here. A V8 will have 8 mountains and so on.","title":"Atlast, creation of an engine"},{"location":"creation_of_an_engine/#creation-of-an-engine","text":"I am just rly quickly going to go thru the basics of getting an engine to run here OK, nothing too fancy. To start off to get an engine to run all u need is correct Distributor: Camshaft lobes: Rod Journals: And last, cylinder banks:","title":"Creation of an engine"},{"location":"creation_of_an_engine/#the-distributor","text":"The number 1 rule is that 1 full cycle of a combustion engine is 720 degrees of crankshaft rotation. This means that 720 / [number of cylinders] is how u calculate your firing interval. The firing interval is very important, if u get it wrong your engine will NEVER work. The pictures I have here are actually a bad example bcs this is an uneven firing engine making it more complicated so we wont do that now. Instead I am going to show an even firing engine where 720 / [number of cylinders] is actually true. This shows that since this is a V10 the engine wants to fire a cylinder every 72 degrees. I have put the wires in the correct firing order of the engine and then just increment by cycles of 72 degrees until the last cylinder where the crankshaft is at 648 degrees and then it starts over at 0. 0 and 720 is the same value since above we have declared that 1 cycle is 720 degrees:","title":"The Distributor"},{"location":"creation_of_an_engine/#the-camshaft-lobes","text":"This also follows your firing order and it is going to open every 72 degrees on this V10. Since the firing order of this engine is 1-2-3-4-7-8-9-10-5-6 the increments of 72 are in that order: The numbers on the side is the cylinder numbering. As u can see we start at 0 on cylinder 1 then +1 on cylinder number 2, +2 on cylinder number 3 and so on. Always incrementing by 72. The numbers on the side(+0.05 and -0.07) do NOT matter They are just there to make the engine sound better.","title":"The Camshaft Lobes"},{"location":"creation_of_an_engine/#the-cylinder-banks","text":"With the cylinder banks we specify the amount of cylinders we have, wires are set based on cylinder numbering so for this bank we have 1, 3, 5, 7 and 9. rod journals are also set based on the firing order. Here my rod journals are labeled rj0, rj2, rj4, rj6 and rj8 which might make it more difficult to understand im sry. Anyways rj0 is here connected to both pistons 1 and 2, rj2 is connected to 3 and 4, rj4 is connected to 5 and 6, rj6 is connected to 7 and 8 and finally rj8 is connected to 9 and 10.","title":"The Cylinder Banks"},{"location":"creation_of_an_engine/#the-rod-journals","text":"Since the cams spin twice the speed of the crank, the rod journals are incremented by 144 because 72 * 2 = 144 so for you it will be [firing interval] * 2. Then to have this be correct we take a look at our firing order again: 1-2-3-4-7-8-9-10-5-6. So since rj0 is connected to 1 and 2 and the firing order starts with 1 and 2 we want to have rj0 at 0 degrees. Then rj2 is connected to 3 and 4 so we want rj2 at 144 degrees. Then we have a bit of a conflict here, rj4 is connected to 5 and 6 but out firing order says we fire 7 and 8 so then we will increment rj6 by 144 instead since rj6 is connected to 7 and 8. Then u just follow the rest of this order and you are done. If u followed this and understood it, your engine should now atleast run. U will know it is correct when u get mountains and valleys as the exhaust flow just like this. Since this is a V10 I have 10 mountains here. A V8 will have 8 mountains and so on.","title":"The Rod Journals"},{"location":"errors/","text":"Comng Soon\u2122","title":"Errors"},{"location":"errors/#comng-soontm","text":"","title":"Comng Soon\u2122"},{"location":"getting_started/","text":"Getting Started First off you are going to want to go to Ange Yaghi's Github Then go to \"Releases\", click \"Assets\", then download the .zip Extract the .zip literally anywhere but lets say on your Desktop. Head into the /bin folder and open engine-sim-app.exe Changing engines OK so the structure of folders goes like this ~/assets/engines/ However main.mr is located in ~/assets so we dont actually need to type that out we can just say engines . Because of that this is how your main.mr file looks like and to use a custom engine all u have to do is add your .mr file to the folder ~/assets/engines. Then in your main.mr file u can either import this file alongside the standard kohler_ch75 with import \"engines/[name of engine file].mr\" or simply replace kohler_ch75 with the name of your engine file So thats how u import the file then u need to find the public node of the engine u want. This is done by opening up your .mr file of choice and finding the part that looks like this: public node is the part u want which in this case is Ninja_650 This name u will set under set_engine( engine: And thats it!","title":"Getting Started"},{"location":"getting_started/#getting-started","text":"First off you are going to want to go to Ange Yaghi's Github Then go to \"Releases\", click \"Assets\", then download the .zip Extract the .zip literally anywhere but lets say on your Desktop. Head into the /bin folder and open engine-sim-app.exe","title":"Getting Started"},{"location":"getting_started/#changing-engines","text":"OK so the structure of folders goes like this ~/assets/engines/ However main.mr is located in ~/assets so we dont actually need to type that out we can just say engines . Because of that this is how your main.mr file looks like and to use a custom engine all u have to do is add your .mr file to the folder ~/assets/engines. Then in your main.mr file u can either import this file alongside the standard kohler_ch75 with import \"engines/[name of engine file].mr\" or simply replace kohler_ch75 with the name of your engine file So thats how u import the file then u need to find the public node of the engine u want. This is done by opening up your .mr file of choice and finding the part that looks like this: public node is the part u want which in this case is Ninja_650 This name u will set under set_engine( engine: And thats it!","title":"Changing engines"},{"location":"home/","text":"Welcome to enginesim.guide This site is dedicated towards teaching others on how to create engines in Ange Yaghi's Engine Simulator. (Aswell as other things around it) The Engine Simulator can be found at: Ange Yaghi's Github","title":"Home"},{"location":"home/#welcome-to-enginesimguide","text":"This site is dedicated towards teaching others on how to create engines in Ange Yaghi's Engine Simulator. (Aswell as other things around it) The Engine Simulator can be found at: Ange Yaghi's Github","title":"Welcome to enginesim.guide"},{"location":"mods/","text":"Comng Soon\u2122","title":"Mods"},{"location":"mods/#comng-soontm","text":"","title":"Comng Soon\u2122"},{"location":"source_editing/","text":"Comng Soon\u2122","title":"Source Code editing"},{"location":"source_editing/#comng-soontm","text":"","title":"Comng Soon\u2122"},{"location":"structure_of_an_engine_file/","text":"The structure of an engine file Calling files This right here is how every engine file starts. By importing engine_sim.mr , calling units aswell as constants. The impulse library also gets loaded. Everything I am going to show here just like this CANNOT be excluded or it will NOT work. Labels Directly after calling these files u want to declare your labels, labels are basically variables as far as I understand and they simplify making neccesary calculations. Distributor The distributor as its name suggests distributes sparks between the cylinders. Wires Wires is just a declaration of the ignition wires. Sym Sample I am not sure what this is but my guess is that it is how the audio synthesizing is sampled(?) Lobe Profiles This is where the degrees for your cams can be set. Camshaft The camshaft is where u can set lobe seperation, ignition advance/retardation, base radius of the camshaft etc. Once again labels have to be declared here as it cant accesss the labels that were declared earler. The camshaft is mainly where u set every individual cam lobe that has to follow your engines firing order. Flow Sample Flow Sample is just a declaration for flow samples. Engine Head This is where the flow samples come into play, this is where u can tune the flow of fuel in the intake. I dont know much exactly how this works but basically higher number = more power. Intake This is your intake, the intake also includes the \"carburetor\" so u can change its parameters here. Plenum size and idle throttle position can be changed here too aswell as other things. Main Engine This is where the engine \"starts\". U can change the engine name, redline, starter speed and torque + u can also change fuel parameters here. Wires below just tells the engine to use the wires that are already declared. Crankshaft Just all the parameters for your crankshaft. Rod Journals Your rod journals and their angles get declared here. Pistons Parameters for your pistons. Connecting Rods Parameters for your connecting rods. Cylinder Bank Parameters Parameters for your cylinder bank/s. Intake Same as before its just using the same intake but changing its variables. Exhaust Exhaust System aswell as audio for the exhaust system at the bottom. Volume, flow rate, tube length and velocity decay can be set here. Dont touch the audio part for now OK. Cylinder Banks If u have an inline engine u would only have 1 cylinder bank but this is a V engine so it has 2. All your cylinders are right here. This is just telling the engine that u have these 2 cylinder banks and a crankshaft. Harmonic Cam Lobe I actually dont know what this is, But judging by its name I would guess its an extra cam lobe that is harmonic to the rest. Meaning it has a relation opposite of the other cam lobes. Idk im clueless. This tells the engine to use the lobe profiles from earlier and the cylinder head on both cylinder banks. Timing Curve This is the timing curve of your ignition. This can make u alot of power. Ignition Module This just tells the engine to use the distributor from earlier.","title":"The Structure of an Engine file"},{"location":"structure_of_an_engine_file/#the-structure-of-an-engine-file","text":"","title":"The structure of an engine file"},{"location":"structure_of_an_engine_file/#calling-files","text":"This right here is how every engine file starts. By importing engine_sim.mr , calling units aswell as constants. The impulse library also gets loaded. Everything I am going to show here just like this CANNOT be excluded or it will NOT work.","title":"Calling files"},{"location":"structure_of_an_engine_file/#labels","text":"Directly after calling these files u want to declare your labels, labels are basically variables as far as I understand and they simplify making neccesary calculations.","title":"Labels"},{"location":"structure_of_an_engine_file/#distributor","text":"The distributor as its name suggests distributes sparks between the cylinders.","title":"Distributor"},{"location":"structure_of_an_engine_file/#wires","text":"Wires is just a declaration of the ignition wires.","title":"Wires"},{"location":"structure_of_an_engine_file/#sym-sample","text":"I am not sure what this is but my guess is that it is how the audio synthesizing is sampled(?)","title":"Sym Sample"},{"location":"structure_of_an_engine_file/#lobe-profiles","text":"This is where the degrees for your cams can be set.","title":"Lobe Profiles"},{"location":"structure_of_an_engine_file/#camshaft","text":"The camshaft is where u can set lobe seperation, ignition advance/retardation, base radius of the camshaft etc. Once again labels have to be declared here as it cant accesss the labels that were declared earler. The camshaft is mainly where u set every individual cam lobe that has to follow your engines firing order.","title":"Camshaft"},{"location":"structure_of_an_engine_file/#flow-sample","text":"Flow Sample is just a declaration for flow samples.","title":"Flow Sample"},{"location":"structure_of_an_engine_file/#engine-head","text":"This is where the flow samples come into play, this is where u can tune the flow of fuel in the intake. I dont know much exactly how this works but basically higher number = more power.","title":"Engine Head"},{"location":"structure_of_an_engine_file/#intake","text":"This is your intake, the intake also includes the \"carburetor\" so u can change its parameters here. Plenum size and idle throttle position can be changed here too aswell as other things.","title":"Intake"},{"location":"structure_of_an_engine_file/#main-engine","text":"This is where the engine \"starts\". U can change the engine name, redline, starter speed and torque + u can also change fuel parameters here. Wires below just tells the engine to use the wires that are already declared.","title":"Main Engine"},{"location":"structure_of_an_engine_file/#crankshaft","text":"Just all the parameters for your crankshaft.","title":"Crankshaft"},{"location":"structure_of_an_engine_file/#rod-journals","text":"Your rod journals and their angles get declared here.","title":"Rod Journals"},{"location":"structure_of_an_engine_file/#pistons","text":"Parameters for your pistons.","title":"Pistons"},{"location":"structure_of_an_engine_file/#connecting-rods","text":"Parameters for your connecting rods.","title":"Connecting Rods"},{"location":"structure_of_an_engine_file/#cylinder-bank-parameters","text":"Parameters for your cylinder bank/s.","title":"Cylinder Bank Parameters"},{"location":"structure_of_an_engine_file/#intake_1","text":"Same as before its just using the same intake but changing its variables.","title":"Intake"},{"location":"structure_of_an_engine_file/#exhaust","text":"Exhaust System aswell as audio for the exhaust system at the bottom. Volume, flow rate, tube length and velocity decay can be set here. Dont touch the audio part for now OK.","title":"Exhaust"},{"location":"structure_of_an_engine_file/#cylinder-banks","text":"If u have an inline engine u would only have 1 cylinder bank but this is a V engine so it has 2. All your cylinders are right here. This is just telling the engine that u have these 2 cylinder banks and a crankshaft.","title":"Cylinder Banks"},{"location":"structure_of_an_engine_file/#harmonic-cam-lobe","text":"I actually dont know what this is, But judging by its name I would guess its an extra cam lobe that is harmonic to the rest. Meaning it has a relation opposite of the other cam lobes. Idk im clueless. This tells the engine to use the lobe profiles from earlier and the cylinder head on both cylinder banks.","title":"Harmonic Cam Lobe"},{"location":"structure_of_an_engine_file/#timing-curve","text":"This is the timing curve of your ignition. This can make u alot of power.","title":"Timing Curve"},{"location":"structure_of_an_engine_file/#ignition-module","text":"This just tells the engine to use the distributor from earlier.","title":"Ignition Module"},{"location":"tuning/","text":"Comng Soon\u2122","title":"Tuning"},{"location":"tuning/#comng-soontm","text":"","title":"Comng Soon\u2122"}]}